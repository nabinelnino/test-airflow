########################################
## CONFIG | Airflow Configs
########################################
airflow:

  legacyCommands: false

  image:
    repository: us-east1-docker.pkg.dev/aircheck-398319/airflow-custom-images/airflow-custom
    tag: 0.0.1
    pullPolicy: IfNotPresent
    restartPolicy: Never

  executor: CeleryExecutor

  fernetKey: ""

  webserverSecretKey: ""

  config:
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "False"
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"

    ## remote log storage
    AIRFLOW__LOGGING__REMOTE_LOGGING: "True"
    AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: "gs://test-aircheck/airflow_test/logs"
    AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: "my_gcp"

    ## plugins
    AIRFLOW__CORE__PLUGINS_FOLDER: "/var/airflow/plugins"

  users:
    - username: admin
      password: admin
      role: Admin
      email: admin@example.com
      firstName: admin
      lastName: admin

  connections:
    - id: my_gcp
      type: google_cloud_platform
      description: my GCP connection
      extra: |
        {
          "extra__google_cloud_platform__num_retries": 5
        }


  pools:
    - name: "pool_1"
      slots: 5
      description: "example pool with 5 slots"
    - name: "pool_2"
      slots: 10
      description: "example pool with 10 slots"

  extraPipPackages: []

  extraEnv:
    - name: AIRFLOW__CORE__FERNET_KEY
      valueFrom:
        secretKeyRef:
          name: airflow-cluster-fernet-key
          key: value
    - name: AIRFLOW__WEBSERVER__SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: airflow-cluster-webserver-key
          key: value
    - name: PROJECT_NAME
      valueFrom:
        configMapKeyRef:
          name: airflow-cluster-project-variables
          key: project_name
    - name: LOCATION
      valueFrom:
        configMapKeyRef:
          name: airflow-cluster-project-variables
          key: location
    - name: AIRFLOW__WEBSERVER__NAVBAR_COLOR
      valueFrom:
        configMapKeyRef:
          name: airflow-cluster-project-variables
          key: navbar_color
    - name: BUCKET
      valueFrom:
        configMapKeyRef:
          name: airflow-cluster-project-variables
          key: bucket

  extraVolumeMounts: []

  extraVolumes: []

###################################
## COMPONENT | Airflow Scheduler
###################################
scheduler:
  ## the number of scheduler Pods to run
#  replicas: 1

  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"

  ## configs for the log-cleanup sidecar of the scheduler
  logCleanup:
    enabled: true
    retentionMinutes: 21600

    resources:
      requests:
        cpu: "10m"
        memory: "32Mi"

  livenessProbe:
    enabled: true

    taskCreationCheck:
      enabled: false
      thresholdSeconds: 300
      schedulerAgeBeforeCheck: 180

###################################
## COMPONENT | Airflow Webserver
###################################
web:
  ## the number of web Pods to run
#  replicas: 1

  resources:
    requests:
      cpu: "200m"
      memory: "900Mi"

  ## configs for the Service of the web Pods
  service:
    type: LoadBalancer
    externalPort: 443
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    annotations:
      cloud.google.com/load-balancer-type: "Internal"

  webserverConfig:
    ## the full content of the `webserver_config.py` file (as a string)
    stringOverride: |
      from airflow import configuration as conf
      from flask_appbuilder.security.manager import AUTH_DB
      
      # the SQLAlchemy connection string
      SQLALCHEMY_DATABASE_URI = conf.get("core", "SQL_ALCHEMY_CONN")
      
      # use embedded DB for auth
      AUTH_TYPE = AUTH_DB

    ## the name of a Secret containing a `webserver_config.py` key
    existingSecret: ""



###################################
## COMPONENT | Airflow Workers
###################################
workers:
  ## if the airflow workers StatefulSet should be deployed
  enabled: true

  ## the number of worker Pods to run
  replicas: 1

  resources:
    requests:
      cpu: "200m"
      memory: "2Gi"

  ## configs for the PodDisruptionBudget of the worker StatefulSet
  podDisruptionBudget:
    enabled: true
    maxUnavailable: "20%"

  logCleanup:
    enabled: true
    retentionMinutes: 21600

    resources:
      requests:
        cpu: "10m"
        memory: "32Mi"

###################################
## COMPONENT | Triggerer
###################################
triggerer:
  ## if the airflow triggerer should be deployed
  enabled: true

  ## the number of triggerer Pods to run
  replicas: 1

  resources:
    requests:
      cpu: "200m"
      memory: "2Gi"

  ## maximum number of triggers each triggerer will run at once (sets `AIRFLOW__TRIGGERER__DEFAULT_CAPACITY`)
  capacity: 1000

###################################
## COMPONENT | Flower
###################################
flower:
  ## if the airflow flower UI should be deployed
  enabled: true

  ## the number of flower Pods to run
  replicas: 1

  ## resource requests/limits for the flower Pod
  ## [SPEC] https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  resources:
    requests:
      cpu: "10m"
      memory: "64Mi"

  ## configs for the Service of the flower Pods
  service:
    type: ClusterIP
    externalPort: 5555

###################################
## CONFIG | Airflow Logs
###################################
logs:
  ## the airflow logs folder
  path: /opt/airflow/logs

  ## configs for the logs PVC
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/monitoring/log-persistence.md
  persistence:
    enabled: false

###################################
## CONFIG | Airflow DAGs
###################################
dags:
  ## the airflow dags folder
  path: /var/airflow/dags

  ## configs for the dags PVC
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/dags/load-dag-definitions.md
  persistence:
    enabled: true
    existingClaim: airflow-dags-pvc
    accessMode: ReadOnlyMany
    mountPath: /var/airflow/dags

###################################
## CONFIG | Kubernetes Ingress
###################################
ingress:
  ## if we should deploy Ingress resources
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/kubernetes/ingress.md
  enabled: false

###################################
## CONFIG | Kubernetes ServiceAccount
###################################
serviceAccount:
  ## if a Kubernetes ServiceAccount is created
  create: true

  ## the name of the ServiceAccount
  name: "airflow"

  ## annotations for the ServiceAccount
  annotations:
    iam.gke.io/gcp-service-account: "airflow-kubernetes@aircheck-398319.iam.gserviceaccount.com"

###################################
## CONFIG | Kubernetes Extra Manifests
###################################

## a list of extra Kubernetes manifests that will be deployed alongside the chart
## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/kubernetes/extra-manifests.md
extraManifests: []

###################################
## DATABASE | PgBouncer
###################################
pgbouncer:
  ## if the pgbouncer Deployment is created
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/database/pgbouncer.md
  enabled: false


###################################
## DATABASE | Embedded Postgres
###################################
postgresql:
  ## if the `stable/postgresql` chart is used
  ## - [WARNING] the embedded Postgres is NOT SUITABLE for production deployments of Airflow
  ## - [WARNING] consider using an external database with `externalDatabase.*`
  ## - set to `false` if using `externalDatabase.*`
  ##
  enabled: ture

  ## configs for the postgres container image
  ##
  image:
    registry: ghcr.io
    repository: airflow-helm/postgresql-bitnami
    tag: 11.22-patch.0
    pullPolicy: IfNotPresent

  ## the postgres database to use
  ##
  postgresqlDatabase: airflow

  ## the postgres user to create
  ##
  postgresqlUsername: postgres

  ## the postgres user's password
  ##
  postgresqlPassword: airflow

  ## the name of a pre-created secret containing the postgres password
  ##
  existingSecret: ""

  ## the key within `postgresql.existingSecret` containing the password string
  ##
  existingSecretKey: "postgresql-password"

  ## configs for the PVC of postgresql
  ##
  persistence:
    ## if postgres will use Persistent Volume Claims to store data
    ## - [WARNING] if false, data will be LOST as postgres Pods restart
    ##
    enabled: true

    ## the name of the StorageClass used by the PVC
    ##
    storageClass: ""

    ## the access modes of the PVC
    ##
    accessModes:
      - ReadWriteOnce

    ## the size of PVC to request
    ##
    size: 8Gi

  ## configs for the postgres StatefulSet
  ##
  master:
    ## the nodeSelector configs for the postgres Pods
    ## - docs for nodeSelector:
    ##   https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
    ##
    nodeSelector: {}

    ## the affinity configs for the postgres Pods
    ## - spec for Affinity:
    ##   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.29/#affinity-v1-core
    ##
    affinity: {}

    ## the toleration configs for the postgres Pods
    ## - spec for Toleration:
    ##   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.29/#toleration-v1-core
    ##
    tolerations: []

    ## annotations for the postgres Pods
    ##
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

# ###################################
# ## DATABASE | External Database
# ###################################
externalDatabase:
  ## the type of external database
  ## - allowed values: "mysql", "postgres"
  ##
  type: postgres

  ## the host of the external database
  ##
  host: localhost
  # host: 10.70.241.3

  ## the port of the external database
  ##
  port: 5432

  ## the database/scheme to use within the external database
  ##
  database: airflow

  ## the username for the external database
  ##
  user: airflow

  ## the name of a pre-created secret containing the external database user
  ## - if set, this overrides `externalDatabase.user`
  ##
  userSecret: ""

  ## the key within `externalDatabase.userSecret` containing the user string
  ##
  # userSecretKey: "postgresql-user"

  ## the password for the external database
  ## - [WARNING] to avoid storing the password in plain-text within your values,
  ##   create a Kubernetes secret and use `externalDatabase.passwordSecret`
  ##
  password: "test@aircheck"

  ## the name of a pre-created secret containing the external database password
  ## - if set, this overrides `externalDatabase.password`
  ##
  passwordSecret: ""

  ## the key within `externalDatabase.passwordSecret` containing the password string
  ##
  # passwordSecretKey: "postgresql-password"

  ## extra connection-string properties for the external database
  ##
  ## ____ EXAMPLE _______________
  ##   # require SSL (only for Postgres)
  ##   properties: "?sslmode=require"
  ##
  properties: ""





# ###################################
# ## DATABASE | Embedded Postgres
# ###################################
# postgresql:
#   ## if the `stable/postgresql` chart is used
#   enabled: false

###################################
## DATABASE | External Database
###################################
# externalDatabase:
#   type: postgres
#   # host: 10.70.241.3
#   host: 35.231.111.59
#   port: 5432
#   database: airflow

#   userSecret: "airflow-cluster-postgres-credentials" 
#   userSecretKey: "username"

#   passwordSecret: "airflow-cluster-postgres-credentials"
#   passwordSecretKey: "password"

#   properties: ""

###################################
## DATABASE | Embedded Redis
###################################
redis:
  ## if the `stable/redis` chart is used
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/database/embedded-redis.md
  ## [WARNING] consider using an external database with `externalDatabase.*`
  enabled: true

  ## the name of a pre-created secret containing the redis password
  existingSecret: "airflow-cluster-redis-password"
  existingSecretPasswordKey: "redis-password"

  ## configs for redis cluster mode
  cluster:
    enabled: false
    slaveCount: 1

  ## configs for the redis master StatefulSet
  master:
    ## resource requests/limits for the redis master Pods
    ## [SPEC] https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
    resources:
      requests:
        cpu: "10m"
        memory: "32Mi"

    ## configs for the PVC of the redis master Pods
    persistence:
      enabled: false
      storageClass: ""
      size: 8Gi

  ## configs for the redis slave StatefulSet
  slave:
    ## resource requests/limits for the slave Pods
    ## [SPEC] https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
    resources:
      requests:
        cpu: "10m"
        memory: "32Mi"

    ## configs for the PVC of the redis slave Pods
    persistence:
      enabled: false
      storageClass: ""
      size: 8Gi

###################################
## DATABASE | External Redis
###################################
externalRedis:
  ## the host of the external redis
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/database/external-redis.md
  host: localhost